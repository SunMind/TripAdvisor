2024-01-29 22:09:36 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column count does not match; SQL statement:
insert into item (name, category, weight, notes) values (1, 'Vandens buteliukas', 'HYDRATION', 0.5 , 'Palaikyti skysčiams kūne' ) [21002-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.command.dml.Insert.doPrepare(Insert.java:295)
	at org.h2.command.dml.DataChangeStatement.prepare(DataChangeStatement.java:37)
	at org.h2.command.Parser.prepareCommand(Parser.java:575)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:631)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:554)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1116)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:237)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1816)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1766)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:931)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:608)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:733)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:435)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1305)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1294)
	at com.bezkoder.spring.jpa.h2.SpringBootJpaH2Application.main(SpringBootJpaH2Application.java:10)
2024-01-30 20:53:48 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "SEASON" already exists; SQL statement:
CREATE TABLE season ( code varchar(20), name VARCHAR(20), description VARCHAR(255) ) [42101-214]
2024-01-30 21:05:16 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE clf_code ( id INT, domain varchar(20), code varchar(20), meaning varchar(20), description varchar(300) ) [*]DROP TABLE IF EXISTS items_seasons"; SQL statement:
CREATE TABLE clf_code ( id INT, domain varchar(20), code varchar(20), meaning varchar(20), description varchar(300) ) DROP TABLE IF EXISTS items_seasons [42000-214]
2024-01-30 21:05:54 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Constraint "PRIMARY KEY | UNIQUE (ID)" not found; SQL statement:
CREATE TABLE items_seasons ( item_id INT, clf_code_id INT, PRIMARY KEY (item_id, clf_code_id), FOREIGN KEY (item_id) REFERENCES item(id), FOREIGN KEY (clf_code_id) REFERENCES clf_code(id) ) [90057-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:632)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:258)
	at org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:72)
	at org.h2.command.ddl.AlterTable.update(AlterTable.java:46)
	at org.h2.command.ddl.CommandWithColumns.createConstraints(CommandWithColumns.java:83)
	at org.h2.command.ddl.CreateTable.update(CreateTable.java:134)
	at org.h2.command.CommandContainer.update(CommandContainer.java:169)
	at org.h2.command.Command.executeUpdate(Command.java:252)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:252)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applySchemaScripts(AbstractScriptDatabaseInitializer.java:98)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1816)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1766)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:931)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:608)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:733)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:435)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1305)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1294)
	at trip.advisor.TripAdvisorApplication.main(TripAdvisorApplication.java:10)
2024-01-30 21:12:36 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Cannot drop "CLF_CODE" because "CONSTRAINT_6440, CONSTRAINT_2FF0" depends on it; SQL statement:
DROP TABLE IF EXISTS clf_code [90107-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:632)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.command.ddl.DropTable.prepareDrop(DropTable.java:97)
	at org.h2.command.ddl.DropTable.update(DropTable.java:121)
	at org.h2.command.CommandContainer.update(CommandContainer.java:169)
	at org.h2.command.Command.executeUpdate(Command.java:252)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:252)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applySchemaScripts(AbstractScriptDatabaseInitializer.java:98)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1816)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1766)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:931)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:608)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:733)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:435)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1305)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1294)
	at trip.advisor.TripAdvisorApplication.main(TripAdvisorApplication.java:10)
2024-01-30 21:13:50 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Cannot drop "CLF_CODE" because "CONSTRAINT_6440, CONSTRAINT_2FF0" depends on it; SQL statement:
DROP TABLE IF EXISTS clf_code [90107-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:632)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.command.ddl.DropTable.prepareDrop(DropTable.java:97)
	at org.h2.command.ddl.DropTable.update(DropTable.java:121)
	at org.h2.command.CommandContainer.update(CommandContainer.java:169)
	at org.h2.command.Command.executeUpdate(Command.java:252)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:252)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applySchemaScripts(AbstractScriptDatabaseInitializer.java:98)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1816)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1766)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:931)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:608)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:733)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:435)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1305)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1294)
	at trip.advisor.TripAdvisorApplication.main(TripAdvisorApplication.java:10)
2024-01-30 21:15:40 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "CLF_CODE" not found; SQL statement:
CREATE TABLE items_seasons ( id INT PRIMARY KEY, item_id INT, clf_code_id INT, FOREIGN KEY (item_id) REFERENCES item(id), FOREIGN KEY (clf_code_id) REFERENCES clf_code(id) ) [42102-214]
2024-01-30 21:29:20 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "delete from clf_code INSERT [*]INTO clf_code (id, domain, code, meaning, description) VALUES (1, 'SEASON', 'SUMMER', 'Summer', ''), (2, 'SEASON', 'AUTUMN', 'Autumn', ''), (3, 'SEASON', 'WINTER', 'Winter', ''), (4, 'SEASON', 'SPRING', 'Spring', ''), (5, 'RELIEF', 'FLAT', 'Flat terrain', ''), (6, 'RELIEF', 'HILLY', 'Hilly terrain', ''), (7, 'RELIEF', 'MOUNTAINOUS', 'Mountainous terrain', ''), (8, 'RELIEF', 'FORESTED', 'Forested areas', ''), (9, 'RELIEF', 'DESERT', 'Desert terrain', ''), (10, 'RELIEF', 'COASTAL', 'Coastal areas', ''), (11, 'RELIEF', 'URBAN', 'Urban environment', ''), (12, 'RELIEF', 'RURAL', 'Rural landscape', ''), (13, 'RELIEF', 'WILDERNESS', 'Wilderness areas', '')"; SQL statement:
delete from clf_code INSERT INTO clf_code (id, domain, code, meaning, description) VALUES (1, 'SEASON', 'SUMMER', 'Summer', ''), (2, 'SEASON', 'AUTUMN', 'Autumn', ''), (3, 'SEASON', 'WINTER', 'Winter', ''), (4, 'SEASON', 'SPRING', 'Spring', ''), (5, 'RELIEF', 'FLAT', 'Flat terrain', ''), (6, 'RELIEF', 'HILLY', 'Hilly terrain', ''), (7, 'RELIEF', 'MOUNTAINOUS', 'Mountainous terrain', ''), (8, 'RELIEF', 'FORESTED', 'Forested areas', ''), (9, 'RELIEF', 'DESERT', 'Desert terrain', ''), (10, 'RELIEF', 'COASTAL', 'Coastal areas', ''), (11, 'RELIEF', 'URBAN', 'Urban environment', ''), (12, 'RELIEF', 'RURAL', 'Rural landscape', ''), (13, 'RELIEF', 'WILDERNESS', 'Wilderness areas', '') [42000-214]
2024-01-30 21:32:20 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "([*]14, 'CATEGORY', 'CLOTHING', 'Clothing', 'Clothing items for the trip'), (15, 'CATEGORY', 'FOOTWEAR', 'Footwear', 'Footwear suitable for the trip'), (16, 'CATEGORY', 'SLEEPING_BAG', 'Sleeping Bag', 'Sleeping bag for the trip'), (17, 'CATEGORY', 'SHELTER', 'Shelter', 'Shelter items for the trip'), (18, 'CATEGORY', 'COOKING_GEAR', 'Cooking Gear', 'Cooking gear for the trip'), (19, 'CATEGORY', 'HYDRATION', 'Hydration', 'Items related to hydration for the trip'), (20, 'CATEGORY', 'NAVIGATION', 'Navigation', 'Navigation items for the trip'), (21, 'CATEGORY', 'SAFETY', 'Safety', 'Safety items for the trip'), (22, 'CATEGORY', 'TOOL_KIT', 'Tool Kit', 'Tool kit for the trip'), (23, 'CATEGORY', 'PERSONAL_ITEMS', 'Personal Items', 'Personal items for the trip')"; expected "(, SELECT, TABLE, VALUES"; SQL statement:
(14, 'CATEGORY', 'CLOTHING', 'Clothing', 'Clothing items for the trip'), (15, 'CATEGORY', 'FOOTWEAR', 'Footwear', 'Footwear suitable for the trip'), (16, 'CATEGORY', 'SLEEPING_BAG', 'Sleeping Bag', 'Sleeping bag for the trip'), (17, 'CATEGORY', 'SHELTER', 'Shelter', 'Shelter items for the trip'), (18, 'CATEGORY', 'COOKING_GEAR', 'Cooking Gear', 'Cooking gear for the trip'), (19, 'CATEGORY', 'HYDRATION', 'Hydration', 'Items related to hydration for the trip'), (20, 'CATEGORY', 'NAVIGATION', 'Navigation', 'Navigation items for the trip'), (21, 'CATEGORY', 'SAFETY', 'Safety', 'Safety items for the trip'), (22, 'CATEGORY', 'TOOL_KIT', 'Tool Kit', 'Tool kit for the trip'), (23, 'CATEGORY', 'PERSONAL_ITEMS', 'Personal Items', 'Personal items for the trip') [42001-214]
2024-01-31 21:52:14 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: C:/Users/Mindaugas Sungaila/Desktop/Mano/Trip-Advisor-Tieto/testdb.mv.db [2.1.214/7]" [50000-214]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:395)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:125)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:3318)
	at org.h2.mvstore.MVStore.panic(MVStore.java:593)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:469)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:4082)
	at org.h2.mvstore.db.Store.<init>(Store.java:136)
	at org.h2.engine.Database.<init>(Database.java:324)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:338)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:122)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.getConnectionUrl(H2ConsoleAutoConfiguration.java:94)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.stream.SortedOps$RefSortingSink.end(SortedOps.java:395)
	at java.base/java.util.stream.Sink$ChainedReference.end(Sink.java:258)
	at java.base/java.util.stream.Sink$ChainedReference.end(Sink.java:258)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:575)
	at java.base/java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:260)
	at java.base/java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:616)
	at java.base/java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:622)
	at java.base/java.util.stream.ReferencePipeline.toList(ReferencePipeline.java:627)
	at org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.logDataSources(H2ConsoleAutoConfiguration.java:86)
	at org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.lambda$h2Console$0(H2ConsoleAutoConfiguration.java:69)
	at org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.withThreadContextClassLoader(H2ConsoleAutoConfiguration.java:78)
	at org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.h2Console(H2ConsoleAutoConfiguration.java:69)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:139)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:647)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:201)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:96)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:85)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:261)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:235)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4882)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:871)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:846)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:871)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:241)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:428)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:913)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:485)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:489)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:211)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:183)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:161)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:602)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:733)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:435)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1305)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1294)
	at trip.advisor.TripAdvisorApplication.main(TripAdvisorApplication.java:10)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: C:/Users/Mindaugas Sungaila/Desktop/Mano/Trip-Advisor-Tieto/testdb.mv.db [2.1.214/7]" [50000-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:554)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	... 98 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: C:/Users/Mindaugas Sungaila/Desktop/Mano/Trip-Advisor-Tieto/testdb.mv.db [2.1.214/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:1004)
	at org.h2.mvstore.FileStore.open(FileStore.java:178)
	at org.h2.mvstore.FileStore.open(FileStore.java:128)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:452)
	... 92 more
2024-01-31 21:52:15 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: C:/Users/Mindaugas Sungaila/Desktop/Mano/Trip-Advisor-Tieto/testdb.mv.db [2.1.214/7]" [50000-214]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:395)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:125)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:3318)
	at org.h2.mvstore.MVStore.panic(MVStore.java:593)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:469)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:4082)
	at org.h2.mvstore.db.Store.<init>(Store.java:136)
	at org.h2.engine.Database.<init>(Database.java:324)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:338)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:122)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:159)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:117)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:80)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:52)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applySchemaScripts(AbstractScriptDatabaseInitializer.java:98)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1816)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1766)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:931)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:608)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:733)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:435)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1305)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1294)
	at trip.advisor.TripAdvisorApplication.main(TripAdvisorApplication.java:10)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: C:/Users/Mindaugas Sungaila/Desktop/Mano/Trip-Advisor-Tieto/testdb.mv.db [2.1.214/7]" [50000-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:554)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	... 52 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: C:/Users/Mindaugas Sungaila/Desktop/Mano/Trip-Advisor-Tieto/testdb.mv.db [2.1.214/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:1004)
	at org.h2.mvstore.FileStore.open(FileStore.java:178)
	at org.h2.mvstore.FileStore.open(FileStore.java:128)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:452)
	... 46 more
2024-02-02 09:51:48 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column count does not match; SQL statement:
insert into item (id, name, category, weight, notes) values (1, 'Vandens buteliukas', 'HYDRATION', 0.5 , 'Palaikyti skysčiams kūne' ), (2, 'Palapinė', 'SHELTER', 1.7 , 'Surinkimo instrukcija' ), (3, 'Hiking Boots', 'Footwear', 1.5, 'Durable hiking boots for various terrains'), (4, 'Trail Running Shoes', 'Footwear', 1.2, 'Lightweight shoes suitable for trail running'), (5, 'Winter Jacket', 'Clothing', 2.0, 'Insulated jacket for cold weather'), (6, 'Sunscreen', 'Health and Safety', 0.2, 'Sunscreen for sun protection'), (7, 'Trekking Poles', 'Equipment', 0.8, 'Adjustable trekking poles for stability'), (8, 'Sleeping Bag', 'Sleep System', 1.2, 'Lightweight sleeping bag for camping'), (9, 'Water Bottle', 'Hydration', 0.5, 'Reusable water bottle for staying hydrated'), (10, 'First Aid Kit', 'Health and Safety', 0.7, 'Basic first aid supplies for emergencies'), (11, 'Map and Compass', 'Navigation', 0.3, 'Navigation tools for finding your way'), (12, 'Portable Stove', 'Cooking', 1.0, 'Compact stove for cooking meals during camping'), (13, 'Headlamp', 'Lighting', 0.4, 'Headlamp for hands-free lighting'), (14, 'Tent', 'Shelter', 2.5, 'Lightweight tent for overnight camping'), (15, 'Power Bank', 'Electronics', 0.3, 'Portable power bank for charging devices'), (16, 'Dry Bags', 'Storage', 0.6, 'Waterproof bags for keeping items dry'), (17, 'Backpack', 'Backpack', 1.8, 'Durable backpack for carrying gear'), ('Hiking Socks', 'Clothing', 0.1, 'Moisture-wicking socks for hiking'), ('Camping Stove', 'Cooking', 1.2, 'Portable stove for camping meals'), ('Rain Jacket', 'Clothing', 1.0, 'Waterproof jacket for rainy weather'), ('Sleeping Pad', 'Sleep System', 0.8, 'Inflatable sleeping pad for added comfort'), ('Multi-Tool', 'Tools', 0.5, 'Versatile multi-tool for various purposes'), ('Compact Binoculars', 'Optics', 0.7, 'Binoculars for bird watching and sightseeing'), ('Insect Repellent', 'Health and Safety', 0.3, 'Repellent to protect against insects'), ('Cooking Utensils Set', 'Cooking', 0.6, 'Compact set of utensils for cooking'), ('Emergency Whistle', 'Safety', 0.1, 'Loud whistle for emergencies'), ('Tarp Shelter', 'Shelter', 1.0, 'Tarp for creating a makeshift shelter'), ('Sleeping Bag Liner', 'Sleep System', 0.3, 'Liner for added warmth and cleanliness'), ('Portable Water Filter', 'Hydration', 0.4, 'Filter for purifying water on the go'), ('Lightweight Hammock', 'Shelter', 0.8, 'Hammock for relaxation during breaks'), ('Collapsible Water Container', 'Hydration', 0.2, 'Collapsible container for water storage'), ('Trail Mix', 'Food', 0.5, 'Energy-packed trail mix for snacks') [21002-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.command.dml.Insert.doPrepare(Insert.java:295)
	at org.h2.command.dml.DataChangeStatement.prepare(DataChangeStatement.java:37)
	at org.h2.command.Parser.prepareCommand(Parser.java:575)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:631)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:554)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1116)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:237)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1816)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1766)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:931)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:608)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:733)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:435)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1305)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1294)
	at trip.advisor.TripAdvisorApplication.main(TripAdvisorApplication.java:10)
2024-02-02 09:55:22 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "CLF_CODE" not found; SQL statement:
delete from clf_code [42102-214]
2024-02-02 10:26:55 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ITEMS_SEASONS" not found; SQL statement:
delete from items_seasons [42102-214]
2024-02-02 10:28:57 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ITEMS_SEASONS" not found; SQL statement:
delete from items_seasons [42102-214]
2024-02-02 10:34:02 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ITEMS_SEASONS" not found; SQL statement:
INSERT INTO items_seasons (item_id, season_id) VALUES (1, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SUMMER')), (2, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'AUTUMN')), (3, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'WINTER')), (4, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SPRING')) [42102-214]
2024-02-02 10:40:34 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ITEMS_SEASONS" not found; SQL statement:
delete from items_seasons [42102-214]
2024-02-02 21:08:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE items_seasons ( id INT AUTO_INCREMENT PRIMARY KEY, item_id INT, season_code varchar(20), FOREIGN KEY (item_id) REFERENCES item(id), [*])"; expected "identifier"; SQL statement:
CREATE TABLE items_seasons ( id INT AUTO_INCREMENT PRIMARY KEY, item_id INT, season_code varchar(20), FOREIGN KEY (item_id) REFERENCES item(id), ) [42001-214]
2024-02-02 21:18:10 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "select * from items_seasons \000d\000a\000d\000a[*]select * from item i inner join items_seasons is on i.id = is.item_id where is.season_code = 'WINTER'"; SQL statement:
select * from items_seasons 

select * from item i inner join items_seasons is on i.id = is.item_id where is.season_code = 'WINTER' [42000-214]
2024-02-02 21:22:01 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "select * from item i inner join items_seasons [*]is on i.id = is.item_id where is.season_code = 'WINTER'"; SQL statement:
select * from item i inner join items_seasons is on i.id = is.item_id where is.season_code = 'WINTER' [42000-214]
2024-02-02 21:23:26 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "select * from item i inner join items_seasons [*]is where is.season_code = 'WINTER'"; SQL statement:
select * from item i inner join items_seasons is where is.season_code = 'WINTER' [42000-214]
2024-02-02 21:23:34 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "select * from item i inner join items_seasons [*]is where is.season_code = 'WINTER'"; SQL statement:
select * from item i inner join items_seasons is where is.season_code = 'WINTER' [42000-214]
2024-02-02 21:23:36 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "select * from item i inner join items_seasons [*]is where is.season_code = 'WINTER'"; SQL statement:
select * from item i inner join items_seasons is where is.season_code = 'WINTER' [42000-214]
2024-02-02 21:25:53 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "select i from item i inner join items_seasons [*]is on i.id = is.item_id where is.season_code = 'WINTER'"; SQL statement:
select i from item i inner join items_seasons is on i.id = is.item_id where is.season_code = 'WINTER' [42000-214]
2024-02-02 21:26:33 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "I" not found; SQL statement:
select i from item i inner join items_seasons s on i.id = s.item_id where s.season_code = 'WINTER' [42122-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.expression.ExpressionColumn.getColumnException(ExpressionColumn.java:244)
	at org.h2.expression.ExpressionColumn.optimizeOther(ExpressionColumn.java:226)
	at org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:213)
	at org.h2.command.query.Select.prepareExpressions(Select.java:1170)
	at org.h2.command.query.Query.prepare(Query.java:218)
	at org.h2.command.Parser.prepareCommand(Parser.java:575)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:631)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:554)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1116)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:237)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1339)
	at org.h2.server.web.WebApp.query(WebApp.java:1137)
	at org.h2.server.web.WebApp.query(WebApp.java:1113)
	at org.h2.server.web.WebApp.process(WebApp.java:244)
	at org.h2.server.web.WebApp.processRequest(WebApp.java:176)
	at org.h2.server.web.JakartaWebServlet.doGet(JakartaWebServlet.java:129)
	at org.h2.server.web.JakartaWebServlet.doPost(JakartaWebServlet.java:166)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-02-02 21:44:14 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ITEMS_SEASONS" not found; SQL statement:
delete from items_seasons [42102-214]
2024-02-02 21:57:46 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "CLASSIFICATOR" not found; SQL statement:
CREATE TABLE items_reliefs ( id INT AUTO_INCREMENT PRIMARY KEY, item_id INT, classificator_id INT, FOREIGN KEY (item_id) REFERENCES item(id), FOREIGN KEY (classificator_id) REFERENCES classificator(id) ) [42102-214]
2024-02-02 21:58:28 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "CLASSIFICATOR" not found; SQL statement:
delete from classificator [42102-214]
2024-02-02 21:59:33 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "CLASSIFICATOR" not found; SQL statement:
delete from classificator [42102-214]
2024-02-02 21:59:58 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "CLASSIFICATOR" not found; SQL statement:
INSERT INTO classificator (domain, code, meaning, description) VALUES ('SEASON', 'SUMMER', 'Summer', ''), ('SEASON', 'AUTUMN', 'Autumn', ''), ('SEASON', 'WINTER', 'Winter', ''), ('SEASON', 'SPRING', 'Spring', ''), ('RELIEF', 'FLAT', 'Flat terrain', ''), ('RELIEF', 'HILLY', 'Hilly terrain', ''), ('RELIEF', 'MOUNTAINOUS', 'Mountainous terrain', ''), ('RELIEF', 'FORESTED', 'Forested areas', ''), ('RELIEF', 'DESERT', 'Desert terrain', ''), ('RELIEF', 'COASTAL', 'Coastal areas', ''), ('RELIEF', 'URBAN', 'Urban environment', ''), ('RELIEF', 'RURAL', 'Rural landscape', ''), ('RELIEF', 'WILDERNESS', 'Wilderness areas', ''), ('CATEGORY', 'HYDRATION', 'Hydration', 'Items related to hydration for the trip'), ('CATEGORY', 'SHELTER', 'Shelter', 'Shelter items for the trip'), ('CATEGORY', 'FOOTWEAR', 'Footwear', 'Footwear suitable for the trip'), ('CATEGORY', 'CLOTHING', 'Clothing', 'Clothing items for the trip'), ('CATEGORY', 'HEALTH_AND_SAFETY', 'Health and Safety', 'Health and safety items for the trip'), ('CATEGORY', 'EQUIPMENT', 'Equipment', 'Equipment items for the trip'), ('CATEGORY', 'SLEEP_SYSTEM', 'Sleep System', 'Sleep system items for the trip'), ('CATEGORY', 'NAVIGATION', 'Navigation', 'Navigation items for the trip'), ('CATEGORY', 'COOKING', 'Cooking', 'Cooking items for the trip'), ('CATEGORY', 'LIGHTING', 'Lighting', 'Lighting items for the trip'), ('CATEGORY', 'ELECTRONICS', 'Electronics', 'Electronic items for the trip'), ('CATEGORY', 'STORAGE', 'Storage', 'Storage items for the trip'), ('CATEGORY', 'BACKPACK', 'Backpack', 'Backpack items for the trip'), ('CATEGORY', 'TOOLS', 'Tools', 'Tools items for the trip'), ('CATEGORY', 'OPTICS', 'Optics', 'Optics items for the trip'), ('CATEGORY', 'SAFETY', 'Safety', 'Safety items for the trip'), ('CATEGORY', 'FOOD', 'Food', 'Food items for the trip') [42102-214]
2024-02-02 22:01:34 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "CLASSIFICATOR" not found; SQL statement:
INSERT INTO classificator (domain, code, meaning, description) VALUES ('SEASON', 'SUMMER', 'Summer', ''), ('SEASON', 'AUTUMN', 'Autumn', ''), ('SEASON', 'WINTER', 'Winter', ''), ('SEASON', 'SPRING', 'Spring', ''), ('RELIEF', 'FLAT', 'Flat terrain', ''), ('RELIEF', 'HILLY', 'Hilly terrain', ''), ('RELIEF', 'MOUNTAINOUS', 'Mountainous terrain', ''), ('RELIEF', 'FORESTED', 'Forested areas', ''), ('RELIEF', 'DESERT', 'Desert terrain', ''), ('RELIEF', 'COASTAL', 'Coastal areas', ''), ('RELIEF', 'URBAN', 'Urban environment', ''), ('RELIEF', 'RURAL', 'Rural landscape', ''), ('RELIEF', 'WILDERNESS', 'Wilderness areas', ''), ('CATEGORY', 'HYDRATION', 'Hydration', 'Items related to hydration for the trip'), ('CATEGORY', 'SHELTER', 'Shelter', 'Shelter items for the trip'), ('CATEGORY', 'FOOTWEAR', 'Footwear', 'Footwear suitable for the trip'), ('CATEGORY', 'CLOTHING', 'Clothing', 'Clothing items for the trip'), ('CATEGORY', 'HEALTH_AND_SAFETY', 'Health and Safety', 'Health and safety items for the trip'), ('CATEGORY', 'EQUIPMENT', 'Equipment', 'Equipment items for the trip'), ('CATEGORY', 'SLEEP_SYSTEM', 'Sleep System', 'Sleep system items for the trip'), ('CATEGORY', 'NAVIGATION', 'Navigation', 'Navigation items for the trip'), ('CATEGORY', 'COOKING', 'Cooking', 'Cooking items for the trip'), ('CATEGORY', 'LIGHTING', 'Lighting', 'Lighting items for the trip'), ('CATEGORY', 'ELECTRONICS', 'Electronics', 'Electronic items for the trip'), ('CATEGORY', 'STORAGE', 'Storage', 'Storage items for the trip'), ('CATEGORY', 'BACKPACK', 'Backpack', 'Backpack items for the trip'), ('CATEGORY', 'TOOLS', 'Tools', 'Tools items for the trip'), ('CATEGORY', 'OPTICS', 'Optics', 'Optics items for the trip'), ('CATEGORY', 'SAFETY', 'Safety', 'Safety items for the trip'), ('CATEGORY', 'FOOD', 'Food', 'Food items for the trip') [42102-214]
2024-02-02 22:04:07 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ITEMS_SEASONS" not found; SQL statement:
INSERT INTO items_seasons (item_id, classificator_id) VALUES (1, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SUMMER')), (1, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'AUTUMN')), (1, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'WINTER')), (1, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SPRING')) [42102-214]
2024-02-02 22:10:37 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ITEMS_SEASONS" not found; SQL statement:
INSERT INTO items_seasons (item_id, classificator_id) VALUES (1, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SUMMER')), (1, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'AUTUMN')), (1, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'WINTER')), (1, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SPRING')) [42102-214]
2024-02-02 22:12:19 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table test{[*]" [42000-214]
2024-02-02 22:12:47 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table test{[*]" [42000-214]
2024-02-02 22:13:08 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table test  [*]id INT AUTO_INCREMENT PRIMARY KEY, domain varchar(20)  "; SQL statement:
create table test  id INT AUTO_INCREMENT PRIMARY KEY, domain varchar(20)   [42000-214]
2024-02-02 22:13:52 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table clf  [*]id INT AUTO_INCREMENT PRIMARY KEY, domain varchar(20)  "; SQL statement:
create table clf  id INT AUTO_INCREMENT PRIMARY KEY, domain varchar(20)   [42000-214]
2024-02-02 22:14:42 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ITEMS_SEASONS" not found; SQL statement:
INSERT INTO items_seasons (item_id, classificator_id) VALUES (1, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SUMMER')), (1, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'AUTUMN')), (1, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'WINTER')), (1, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SPRING')) [42102-214]
2024-02-02 22:15:09 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "TESTAS" already exists; SQL statement:
CREATE TABLE testas ( id INT AUTO_INCREMENT PRIMARY KEY, domain varchar(20), code varchar(20), meaning varchar(20), description varchar(300) ) [42101-214]
2024-02-02 22:44:45 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "select * from item\000d\000a\000d\000a[*]select * from items_seasons"; SQL statement:
select * from item

select * from items_seasons [42000-214]
2024-02-03 17:54:50 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Cannot drop "ITEM" because "FKBJ1CYES109JUXSV54YS4PXJ9L" depends on it; SQL statement:
DROP TABLE IF EXISTS item [90107-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:632)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.command.ddl.DropTable.prepareDrop(DropTable.java:97)
	at org.h2.command.ddl.DropTable.update(DropTable.java:121)
	at org.h2.command.CommandContainer.update(CommandContainer.java:169)
	at org.h2.command.Command.executeUpdate(Command.java:252)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:252)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applySchemaScripts(AbstractScriptDatabaseInitializer.java:98)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1816)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1766)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:931)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:608)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:733)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:435)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1305)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1294)
	at trip.advisor.TripAdvisorApplication.main(TripAdvisorApplication.java:10)
2024-02-03 17:55:21 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "ENOUGHFORKM" not found; SQL statement:
insert into item (id, name, category, enoughForKm, weight, notes) values (2, 'Palapinė', 'SHELTER', 400, 1.7 , 'Surinkimo instrukcija' ), (3, 'Hiking Boots', 'FOOTWEAR', 400, 1.5, 'Durable hiking boots for various terrains'), (4, 'Trail Running Shoes', 'FOOTWEAR', 300, 1.2, 'Lightweight shoes suitable for trail running'), (5, 'Winter Jacket', 'CLOTHING', 500, 2.0, 'Insulated jacket for cold weather'), (6, 'Sunscreen', 'HEALTH_AND_SAFETY', 400, 0.2, 'Sunscreen for sun protection'), (7, 'Trekking Poles', 'EQUIPMENT', 400, 0.8, 'Adjustable trekking poles for stability'), (8, 'Sleeping Bag', 'SLEEP_SYSTEM', 600, 1.2, 'Lightweight sleeping bag for camping'), (9, 'Water Bottle', 'HYDRATION',20, 0.5, 'Reusable water bottle for staying hydrated'), (10, 'First Aid Kit', 'HEALTH_AND_SAFETY',1000, 0.7, 'Basic first aid supplies for emergencies'), (11, 'Map and Compass', 'NAVIGATION', 600, 0.3, 'Navigation tools for finding your way'), (12, 'Portable Stove', 'COOKING', 700, 1.0, 'Compact stove for cooking meals during camping'), (13, 'Headlamp', 'LIGHTING', 350, 0.4, 'Headlamp for hands-free lighting'), (14, 'Tent', 'SHELTER', 400, 2.5, 'Lightweight tent for overnight camping'), (15, 'Power Bank', 'ELECTRONICS', 200, 0.3, 'Portable power bank for charging devices'), (16, 'Dry Bags', 'STORAGE', 100, 0.6, 'Waterproof bags for keeping items dry'), (18, 'Hiking Socks', 'CLOTHING', 100, 0.1, 'Moisture-wicking socks for hiking'), (19, 'Camping Stove', 'COOKING', 300, 1.2, 'Portable stove for camping meals'), (20, 'Rain Jacket', 'CLOTHING', 500, 1.0, 'Waterproof jacket for rainy weather'), (21, 'Sleeping Pad', 'SLEEP_SYSTEM', 500, 0.8, 'Inflatable sleeping pad for added comfort'), (22, 'Multi-Tool', 'TOOLS', 1000, 0.5, 'Versatile multi-tool for various purposes'), (23, 'Compact Binoculars', 'OPTICS', 1000, 0.7, 'Binoculars for bird watching and sightseeing'), (24, 'Insect Repellent', 'HEALTH_AND_SAFETY', 400, 0.3, 'Repellent to protect against insects'), (25, 'Cooking Utensils Set', 'COOKING', 400, 0.6, 'Compact set of utensils for cooking'), (26, 'Emergency Whistle', 'HEALTH_AND_SAFETY', 2000, 0.1, 'Loud whistle for emergencies'), (27, 'Tarp Shelter', 'SHELTER', 800, 1.0, 'Tarp for creating a makeshift shelter'), (28, 'Sleeping Bag Liner', 'SLEEP_SYSTEM', 400, 0.3, 'Liner for added warmth and cleanliness'), (29, 'Portable Water Filter', 'HYDRATION', 600, 0.4, 'Filter for purifying water on the go'), (30, 'Lightweight Hammock', 'SHELTER', 600, 0.8, 'Hammock for relaxation during breaks'), (31, 'Collapsible Water Container', 'HYDRATION', 400, 0.2, 'Collapsible container for water storage'), (32, 'Trail Mix', 'FOOD', 40, 0.5, 'Energy-packed trail mix for snacks') [42122-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:749)
	at org.h2.command.Parser.parseColumn(Parser.java:1256)
	at org.h2.command.Parser.parseColumnList(Parser.java:1241)
	at org.h2.command.Parser.parseInsert(Parser.java:1641)
	at org.h2.command.Parser.parsePrepared(Parser.java:814)
	at org.h2.command.Parser.parse(Parser.java:689)
	at org.h2.command.Parser.parse(Parser.java:661)
	at org.h2.command.Parser.prepareCommand(Parser.java:569)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:631)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:554)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1116)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:237)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1816)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1766)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:931)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:608)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:733)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:435)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1305)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1294)
	at trip.advisor.TripAdvisorApplication.main(TripAdvisorApplication.java:10)
2024-02-03 17:56:47 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "ENOUGHFORKM" not found; SQL statement:
insert into item (id, name, category, enoughForKm, weight, notes) values (2, 'Palapinė', 'SHELTER', 400, 1.7 , 'Surinkimo instrukcija' ), (3, 'Hiking Boots', 'FOOTWEAR', 400, 1.5, 'Durable hiking boots for various terrains'), (4, 'Trail Running Shoes', 'FOOTWEAR', 300, 1.2, 'Lightweight shoes suitable for trail running'), (5, 'Winter Jacket', 'CLOTHING', 500, 2.0, 'Insulated jacket for cold weather'), (6, 'Sunscreen', 'HEALTH_AND_SAFETY', 400, 0.2, 'Sunscreen for sun protection'), (7, 'Trekking Poles', 'EQUIPMENT', 400, 0.8, 'Adjustable trekking poles for stability'), (8, 'Sleeping Bag', 'SLEEP_SYSTEM', 600, 1.2, 'Lightweight sleeping bag for camping'), (9, 'Water Bottle', 'HYDRATION',20, 0.5, 'Reusable water bottle for staying hydrated'), (10, 'First Aid Kit', 'HEALTH_AND_SAFETY',1000, 0.7, 'Basic first aid supplies for emergencies'), (11, 'Map and Compass', 'NAVIGATION', 600, 0.3, 'Navigation tools for finding your way'), (12, 'Portable Stove', 'COOKING', 700, 1.0, 'Compact stove for cooking meals during camping'), (13, 'Headlamp', 'LIGHTING', 350, 0.4, 'Headlamp for hands-free lighting'), (14, 'Tent', 'SHELTER', 400, 2.5, 'Lightweight tent for overnight camping'), (15, 'Power Bank', 'ELECTRONICS', 200, 0.3, 'Portable power bank for charging devices'), (16, 'Dry Bags', 'STORAGE', 100, 0.6, 'Waterproof bags for keeping items dry'), (18, 'Hiking Socks', 'CLOTHING', 100, 0.1, 'Moisture-wicking socks for hiking'), (19, 'Camping Stove', 'COOKING', 300, 1.2, 'Portable stove for camping meals'), (20, 'Rain Jacket', 'CLOTHING', 500, 1.0, 'Waterproof jacket for rainy weather'), (21, 'Sleeping Pad', 'SLEEP_SYSTEM', 500, 0.8, 'Inflatable sleeping pad for added comfort'), (22, 'Multi-Tool', 'TOOLS', 1000, 0.5, 'Versatile multi-tool for various purposes'), (23, 'Compact Binoculars', 'OPTICS', 1000, 0.7, 'Binoculars for bird watching and sightseeing'), (24, 'Insect Repellent', 'HEALTH_AND_SAFETY', 400, 0.3, 'Repellent to protect against insects'), (25, 'Cooking Utensils Set', 'COOKING', 400, 0.6, 'Compact set of utensils for cooking'), (26, 'Emergency Whistle', 'HEALTH_AND_SAFETY', 2000, 0.1, 'Loud whistle for emergencies'), (27, 'Tarp Shelter', 'SHELTER', 800, 1.0, 'Tarp for creating a makeshift shelter'), (28, 'Sleeping Bag Liner', 'SLEEP_SYSTEM', 400, 0.3, 'Liner for added warmth and cleanliness'), (29, 'Portable Water Filter', 'HYDRATION', 600, 0.4, 'Filter for purifying water on the go'), (30, 'Lightweight Hammock', 'SHELTER', 600, 0.8, 'Hammock for relaxation during breaks'), (31, 'Collapsible Water Container', 'HYDRATION', 400, 0.2, 'Collapsible container for water storage'), (32, 'Trail Mix', 'FOOD', 40, 0.5, 'Energy-packed trail mix for snacks') [42122-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:749)
	at org.h2.command.Parser.parseColumn(Parser.java:1256)
	at org.h2.command.Parser.parseColumnList(Parser.java:1241)
	at org.h2.command.Parser.parseInsert(Parser.java:1641)
	at org.h2.command.Parser.parsePrepared(Parser.java:814)
	at org.h2.command.Parser.parse(Parser.java:689)
	at org.h2.command.Parser.parse(Parser.java:661)
	at org.h2.command.Parser.prepareCommand(Parser.java:569)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:631)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:554)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1116)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:237)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:102)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:77)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1816)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1766)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:931)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:608)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:733)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:435)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1305)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1294)
	at trip.advisor.TripAdvisorApplication.main(TripAdvisorApplication.java:10)
2024-02-03 19:18:23 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "insert into item (id, name, category, enough_for_km, weight, notes) values (2, 'Backpack', 'STORAGE', 1500, 2.0, 'Storage for all equipment') [*](3, 'Hiking Boots', 'FOOTWEAR', 400, , 1.5, 'Durable hiking boots for various terrains'), (5, 'Winter Jacket', 'CLOTHING', 500, 2.0, 'Insulated jacket for cold weather'), (6, 'Sunscreen', 'HEALTH_AND_SAFETY', 400, 0.2, 'Sunscreen for sun protection'), (7, 'Trekking Poles', 'EQUIPMENT', 400, 0.8, 'Adjustable trekking poles for stability'), (8, 'Sleeping Bag', 'SLEEP_SYSTEM', 600, 1.2, 'Lightweight sleeping bag for camping'), (9, 'Water Bottle', 'HYDRATION',20, 0.5, 'Reusable water bottle for staying hydrated'), (10, 'First Aid Kit', 'HEALTH_AND_SAFETY',1000, 0.7, 'Basic first aid supplies for emergencies'), (11, 'Map and Compass', 'NAVIGATION', 600, 0.3, 'Navigation tools for finding your way'), (13, 'Headlamp', 'LIGHTING', 350, 0.4, 'Headlamp for hands-free lighting'), (14, 'Tent', 'SHELTER', 400, 2.5, 'Lightweight tent for overnight camping'), (15, 'Power Bank', 'ELECTRONICS', 200, 0.3, 'Portable power bank for charging devices'), (16, 'Dry Bags', 'STORAGE', 100, 0.6, 'Waterproof bags for keeping items dry'), (18, 'Hiking Socks', 'CLOTHING', 100, 0.1, 'Moisture-wicking socks for hiking'), (19, 'Camping Stove', 'COOKING', 300, 1.2, 'Portable stove for camping meals'), (20, 'Rain Jacket', 'CLOTHING', 500, 1.0, 'Waterproof jacket for rainy weather'), (21, 'Sleeping Pad', 'SLEEP_SYSTEM', 500, 0.8, 'Inflatable sleeping pad for added comfort'), (22, 'Multi-Tool', 'TOOLS', 1000, 0.5, 'Versatile multi-tool for various purposes'), (24, 'Insect Repellent', 'HEALTH_AND_SAFETY', 400, 0.3, 'Repellent to protect against insects'), (26, 'Emergency Whistle', 'HEALTH_AND_SAFETY', 2000, 0.1, 'Loud whistle for emergencies'), (29, 'Portable Water Filter', 'HYDRATION', 600, 0.4, 'Filter for purifying water on the go'), (31, 'Collapsible Water Container', 'HYDRATION', 400, 0.2, 'Collapsible container for water storage'), (32, 'Trail Mix', 'FOOD', 40, 0.5, 'Energy-packed trail mix for snacks'), (34, 'Travel Towel', 'HYGIENE', 600, 0.3, 'Quick-drying and compact towel for travel'), (35, 'Bug Net', 'HEALTH_AND_SAFETY', 700, 0.5, 'Netting to protect against insects'), (42, 'Travel Umbrella', 'SHELTER', 350, 0.5, 'Compact umbrella for unexpected rain')"; SQL statement:
insert into item (id, name, category, enough_for_km, weight, notes) values (2, 'Backpack', 'STORAGE', 1500, 2.0, 'Storage for all equipment') (3, 'Hiking Boots', 'FOOTWEAR', 400, , 1.5, 'Durable hiking boots for various terrains'), (5, 'Winter Jacket', 'CLOTHING', 500, 2.0, 'Insulated jacket for cold weather'), (6, 'Sunscreen', 'HEALTH_AND_SAFETY', 400, 0.2, 'Sunscreen for sun protection'), (7, 'Trekking Poles', 'EQUIPMENT', 400, 0.8, 'Adjustable trekking poles for stability'), (8, 'Sleeping Bag', 'SLEEP_SYSTEM', 600, 1.2, 'Lightweight sleeping bag for camping'), (9, 'Water Bottle', 'HYDRATION',20, 0.5, 'Reusable water bottle for staying hydrated'), (10, 'First Aid Kit', 'HEALTH_AND_SAFETY',1000, 0.7, 'Basic first aid supplies for emergencies'), (11, 'Map and Compass', 'NAVIGATION', 600, 0.3, 'Navigation tools for finding your way'), (13, 'Headlamp', 'LIGHTING', 350, 0.4, 'Headlamp for hands-free lighting'), (14, 'Tent', 'SHELTER', 400, 2.5, 'Lightweight tent for overnight camping'), (15, 'Power Bank', 'ELECTRONICS', 200, 0.3, 'Portable power bank for charging devices'), (16, 'Dry Bags', 'STORAGE', 100, 0.6, 'Waterproof bags for keeping items dry'), (18, 'Hiking Socks', 'CLOTHING', 100, 0.1, 'Moisture-wicking socks for hiking'), (19, 'Camping Stove', 'COOKING', 300, 1.2, 'Portable stove for camping meals'), (20, 'Rain Jacket', 'CLOTHING', 500, 1.0, 'Waterproof jacket for rainy weather'), (21, 'Sleeping Pad', 'SLEEP_SYSTEM', 500, 0.8, 'Inflatable sleeping pad for added comfort'), (22, 'Multi-Tool', 'TOOLS', 1000, 0.5, 'Versatile multi-tool for various purposes'), (24, 'Insect Repellent', 'HEALTH_AND_SAFETY', 400, 0.3, 'Repellent to protect against insects'), (26, 'Emergency Whistle', 'HEALTH_AND_SAFETY', 2000, 0.1, 'Loud whistle for emergencies'), (29, 'Portable Water Filter', 'HYDRATION', 600, 0.4, 'Filter for purifying water on the go'), (31, 'Collapsible Water Container', 'HYDRATION', 400, 0.2, 'Collapsible container for water storage'), (32, 'Trail Mix', 'FOOD', 40, 0.5, 'Energy-packed trail mix for snacks'), (34, 'Travel Towel', 'HYGIENE', 600, 0.3, 'Quick-drying and compact towel for travel'), (35, 'Bug Net', 'HEALTH_AND_SAFETY', 700, 0.5, 'Netting to protect against insects'), (42, 'Travel Umbrella', 'SHELTER', 350, 0.5, 'Compact umbrella for unexpected rain') [42000-214]
2024-02-03 19:18:59 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "insert into item (id, name, category, enough_for_km, weight, notes) values (2, 'Backpack', 'STORAGE', 1500, 2.0, 'Storage for all equipment') [*](3, 'Hiking Boots', 'FOOTWEAR', 400, 1.5, 'Durable hiking boots for various terrains'), (5, 'Winter Jacket', 'CLOTHING', 500, 2.0, 'Insulated jacket for cold weather'), (6, 'Sunscreen', 'HEALTH_AND_SAFETY', 400, 0.2, 'Sunscreen for sun protection'), (7, 'Trekking Poles', 'EQUIPMENT', 400, 0.8, 'Adjustable trekking poles for stability'), (8, 'Sleeping Bag', 'SLEEP_SYSTEM', 600, 1.2, 'Lightweight sleeping bag for camping'), (9, 'Water Bottle', 'HYDRATION',20, 0.5, 'Reusable water bottle for staying hydrated'), (10, 'First Aid Kit', 'HEALTH_AND_SAFETY',1000, 0.7, 'Basic first aid supplies for emergencies'), (11, 'Map and Compass', 'NAVIGATION', 600, 0.3, 'Navigation tools for finding your way'), (13, 'Headlamp', 'LIGHTING', 350, 0.4, 'Headlamp for hands-free lighting'), (14, 'Tent', 'SHELTER', 400, 2.5, 'Lightweight tent for overnight camping'), (15, 'Power Bank', 'ELECTRONICS', 200, 0.3, 'Portable power bank for charging devices'), (16, 'Dry Bags', 'STORAGE', 100, 0.6, 'Waterproof bags for keeping items dry'), (18, 'Hiking Socks', 'CLOTHING', 100, 0.1, 'Moisture-wicking socks for hiking'), (19, 'Camping Stove', 'COOKING', 300, 1.2, 'Portable stove for camping meals'), (20, 'Rain Jacket', 'CLOTHING', 500, 1.0, 'Waterproof jacket for rainy weather'), (21, 'Sleeping Pad', 'SLEEP_SYSTEM', 500, 0.8, 'Inflatable sleeping pad for added comfort'), (22, 'Multi-Tool', 'TOOLS', 1000, 0.5, 'Versatile multi-tool for various purposes'), (24, 'Insect Repellent', 'HEALTH_AND_SAFETY', 400, 0.3, 'Repellent to protect against insects'), (26, 'Emergency Whistle', 'HEALTH_AND_SAFETY', 2000, 0.1, 'Loud whistle for emergencies'), (29, 'Portable Water Filter', 'HYDRATION', 600, 0.4, 'Filter for purifying water on the go'), (31, 'Collapsible Water Container', 'HYDRATION', 400, 0.2, 'Collapsible container for water storage'), (32, 'Trail Mix', 'FOOD', 40, 0.5, 'Energy-packed trail mix for snacks'), (34, 'Travel Towel', 'HYGIENE', 600, 0.3, 'Quick-drying and compact towel for travel'), (35, 'Bug Net', 'HEALTH_AND_SAFETY', 700, 0.5, 'Netting to protect against insects'), (42, 'Travel Umbrella', 'SHELTER', 350, 0.5, 'Compact umbrella for unexpected rain')"; SQL statement:
insert into item (id, name, category, enough_for_km, weight, notes) values (2, 'Backpack', 'STORAGE', 1500, 2.0, 'Storage for all equipment') (3, 'Hiking Boots', 'FOOTWEAR', 400, 1.5, 'Durable hiking boots for various terrains'), (5, 'Winter Jacket', 'CLOTHING', 500, 2.0, 'Insulated jacket for cold weather'), (6, 'Sunscreen', 'HEALTH_AND_SAFETY', 400, 0.2, 'Sunscreen for sun protection'), (7, 'Trekking Poles', 'EQUIPMENT', 400, 0.8, 'Adjustable trekking poles for stability'), (8, 'Sleeping Bag', 'SLEEP_SYSTEM', 600, 1.2, 'Lightweight sleeping bag for camping'), (9, 'Water Bottle', 'HYDRATION',20, 0.5, 'Reusable water bottle for staying hydrated'), (10, 'First Aid Kit', 'HEALTH_AND_SAFETY',1000, 0.7, 'Basic first aid supplies for emergencies'), (11, 'Map and Compass', 'NAVIGATION', 600, 0.3, 'Navigation tools for finding your way'), (13, 'Headlamp', 'LIGHTING', 350, 0.4, 'Headlamp for hands-free lighting'), (14, 'Tent', 'SHELTER', 400, 2.5, 'Lightweight tent for overnight camping'), (15, 'Power Bank', 'ELECTRONICS', 200, 0.3, 'Portable power bank for charging devices'), (16, 'Dry Bags', 'STORAGE', 100, 0.6, 'Waterproof bags for keeping items dry'), (18, 'Hiking Socks', 'CLOTHING', 100, 0.1, 'Moisture-wicking socks for hiking'), (19, 'Camping Stove', 'COOKING', 300, 1.2, 'Portable stove for camping meals'), (20, 'Rain Jacket', 'CLOTHING', 500, 1.0, 'Waterproof jacket for rainy weather'), (21, 'Sleeping Pad', 'SLEEP_SYSTEM', 500, 0.8, 'Inflatable sleeping pad for added comfort'), (22, 'Multi-Tool', 'TOOLS', 1000, 0.5, 'Versatile multi-tool for various purposes'), (24, 'Insect Repellent', 'HEALTH_AND_SAFETY', 400, 0.3, 'Repellent to protect against insects'), (26, 'Emergency Whistle', 'HEALTH_AND_SAFETY', 2000, 0.1, 'Loud whistle for emergencies'), (29, 'Portable Water Filter', 'HYDRATION', 600, 0.4, 'Filter for purifying water on the go'), (31, 'Collapsible Water Container', 'HYDRATION', 400, 0.2, 'Collapsible container for water storage'), (32, 'Trail Mix', 'FOOD', 40, 0.5, 'Energy-packed trail mix for snacks'), (34, 'Travel Towel', 'HYGIENE', 600, 0.3, 'Quick-drying and compact towel for travel'), (35, 'Bug Net', 'HEALTH_AND_SAFETY', 700, 0.5, 'Netting to protect against insects'), (42, 'Travel Umbrella', 'SHELTER', 350, 0.5, 'Compact umbrella for unexpected rain') [42000-214]
2024-02-03 19:19:49 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO items_seasons (item_id, classificator_id) VALUES (2, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (3, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (5, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'WINTER')), (5, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'AUTUMN')), (6, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SUMMER')), (6, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SPRING')), (7, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SPRING')), (7, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SUMMER')), (7, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'AUTUMN')), (8, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (9, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (10, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (11, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')),[*], (13, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (14, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (15, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (16, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'AUTUMN')), (18, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (19, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (20, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SPRING')), (20, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'AUTUMN')), (20, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'WINTER')), (21, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'WINTER')), (22, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (24, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SPRING')), (25, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (26, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (29, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (31, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (32, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SPRING')), (32, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR'))"; expected "ROW (, (, DEFAULT, INTERSECTS (, NOT, EXISTS, UNIQUE, INTERSECTS"; SQL statement:
INSERT INTO items_seasons (item_id, classificator_id) VALUES (2, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (3, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (5, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'WINTER')), (5, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'AUTUMN')), (6, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SUMMER')), (6, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SPRING')), (7, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SPRING')), (7, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SUMMER')), (7, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'AUTUMN')), (8, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (9, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (10, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (11, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')),, (13, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (14, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (15, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (16, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'AUTUMN')), (18, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (19, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (20, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SPRING')), (20, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'AUTUMN')), (20, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'WINTER')), (21, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'WINTER')), (22, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (24, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SPRING')), (25, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (26, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (29, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (31, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')), (32, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'SPRING')), (32, (SELECT id FROM classificator WHERE domain = 'SEASON' AND code = 'ALL_YEAR')) [42001-214]
2024-02-04 10:06:28 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-214]
2024-02-04 10:25:12 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Cannot drop "ITEM" because "FKBJ1CYES109JUXSV54YS4PXJ9L" depends on it; SQL statement:
DROP TABLE IF EXISTS item [90107-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:632)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.command.ddl.DropTable.prepareDrop(DropTable.java:97)
	at org.h2.command.ddl.DropTable.update(DropTable.java:121)
	at org.h2.command.CommandContainer.update(CommandContainer.java:169)
	at org.h2.command.Command.executeUpdate(Command.java:252)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:252)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applySchemaScripts(AbstractScriptDatabaseInitializer.java:98)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1816)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1766)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:931)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:608)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:733)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:435)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1305)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1294)
	at trip.advisor.TripAdvisorApplication.main(TripAdvisorApplication.java:10)
2024-02-04 10:25:45 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ITEMS_SEASONS" not found; SQL statement:
delete from items_seasons [42102-214]
2024-02-04 10:25:58 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ITEMS_SEASONS" not found; SQL statement:
delete from items_seasons [42102-214]
2024-02-04 10:26:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ITEMS_SEASONS" not found; SQL statement:
delete from items_seasons [42102-214]
2024-02-04 10:26:30 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ITEM" not found; SQL statement:
delete from item [42102-214]
2024-02-04 10:26:48 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ITEM" not found; SQL statement:
delete from item [42102-214]
2024-02-04 10:27:42 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: C:/Users/Mindaugas Sungaila/Desktop/Mano/Trip-Advisor-Tieto/testdb.mv.db [2.1.214/7]" [50000-214]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:395)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:125)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:3318)
	at org.h2.mvstore.MVStore.panic(MVStore.java:593)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:469)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:4082)
	at org.h2.mvstore.db.Store.<init>(Store.java:136)
	at org.h2.engine.Database.<init>(Database.java:324)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:338)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:122)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.getConnectionUrl(H2ConsoleAutoConfiguration.java:94)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.stream.SortedOps$RefSortingSink.end(SortedOps.java:395)
	at java.base/java.util.stream.Sink$ChainedReference.end(Sink.java:258)
	at java.base/java.util.stream.Sink$ChainedReference.end(Sink.java:258)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:575)
	at java.base/java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:260)
	at java.base/java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:616)
	at java.base/java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:622)
	at java.base/java.util.stream.ReferencePipeline.toList(ReferencePipeline.java:627)
	at org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.logDataSources(H2ConsoleAutoConfiguration.java:86)
	at org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.lambda$h2Console$0(H2ConsoleAutoConfiguration.java:69)
	at org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.withThreadContextClassLoader(H2ConsoleAutoConfiguration.java:78)
	at org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.h2Console(H2ConsoleAutoConfiguration.java:69)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:139)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:647)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1332)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1162)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:560)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:201)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:96)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:85)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:261)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:235)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4882)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:871)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:846)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1332)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1322)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:871)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:241)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:428)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:913)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:485)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:489)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:211)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:183)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:161)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:602)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:733)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:435)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1305)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1294)
	at trip.advisor.TripAdvisorApplication.main(TripAdvisorApplication.java:10)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: C:/Users/Mindaugas Sungaila/Desktop/Mano/Trip-Advisor-Tieto/testdb.mv.db [2.1.214/7]" [50000-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:554)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	... 98 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: C:/Users/Mindaugas Sungaila/Desktop/Mano/Trip-Advisor-Tieto/testdb.mv.db [2.1.214/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:1004)
	at org.h2.mvstore.FileStore.open(FileStore.java:178)
	at org.h2.mvstore.FileStore.open(FileStore.java:128)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:452)
	... 92 more
2024-02-04 10:27:43 database: flush
org.h2.message.DbException: General error: "org.h2.mvstore.MVStoreException: The file is locked: C:/Users/Mindaugas Sungaila/Desktop/Mano/Trip-Advisor-Tieto/testdb.mv.db [2.1.214/7]" [50000-214]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:395)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:125)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:3318)
	at org.h2.mvstore.MVStore.panic(MVStore.java:593)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:469)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:4082)
	at org.h2.mvstore.db.Store.<init>(Store.java:136)
	at org.h2.engine.Database.<init>(Database.java:324)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:338)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:122)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:359)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:201)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:470)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:100)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:159)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:117)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:80)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:52)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applySchemaScripts(AbstractScriptDatabaseInitializer.java:98)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1816)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1766)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:931)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:608)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:733)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:435)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1305)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1294)
	at trip.advisor.TripAdvisorApplication.main(TripAdvisorApplication.java:10)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "org.h2.mvstore.MVStoreException: The file is locked: C:/Users/Mindaugas Sungaila/Desktop/Mano/Trip-Advisor-Tieto/testdb.mv.db [2.1.214/7]" [50000-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:554)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	... 52 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: C:/Users/Mindaugas Sungaila/Desktop/Mano/Trip-Advisor-Tieto/testdb.mv.db [2.1.214/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:1004)
	at org.h2.mvstore.FileStore.open(FileStore.java:178)
	at org.h2.mvstore.FileStore.open(FileStore.java:128)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:452)
	... 46 more
2024-02-04 10:37:00 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE"; expected "INSERT"; SQL statement:
INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE [42001-214]
2024-02-04 10:37:05 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE"; expected "INSERT"; SQL statement:
INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE [42001-214]
2024-02-04 10:43:36 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Cannot drop "ITEM" because "FKBJ1CYES109JUXSV54YS4PXJ9L" depends on it; SQL statement:
DROP TABLE IF EXISTS item [90107-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:632)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.command.ddl.DropTable.prepareDrop(DropTable.java:97)
	at org.h2.command.ddl.DropTable.update(DropTable.java:121)
	at org.h2.command.CommandContainer.update(CommandContainer.java:169)
	at org.h2.command.Command.executeUpdate(Command.java:252)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:252)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:87)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:146)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:108)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applySchemaScripts(AbstractScriptDatabaseInitializer.java:98)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:66)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1816)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1766)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:520)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:326)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1156)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:931)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:608)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:733)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:435)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1305)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1294)
	at trip.advisor.TripAdvisorApplication.main(TripAdvisorApplication.java:10)
2024-02-04 10:44:01 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ITEM" not found; SQL statement:
delete from item [42102-214]
2024-02-04 10:44:31 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ITEM" not found; SQL statement:
delete from item [42102-214]
2024-02-04 10:57:46 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ITEM" not found; SQL statement:
delete from item [42102-214]
2024-02-04 11:05:53 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-214]
2024-02-04 11:07:18 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-214]
2024-02-04 11:20:27 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-214]
2024-02-04 11:37:12 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-214]
2024-02-04 11:44:09 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-214]
2024-02-04 11:51:21 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-214]
2024-02-04 14:55:21 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: The object is already closed [90007-214]
2024-02-04 15:17:51 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ITEMS_SEASONS" not found (this database is empty); SQL statement:
delete from items_seasons [42104-214]
2024-02-04 15:18:36 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ITEMS_SEASONS" not found; SQL statement:
delete from items_seasons [42102-214]
